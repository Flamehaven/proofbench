name: ProofBench CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  # Job 1: Code Quality and Type Checking
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npx tsc --noEmit

      - name: Check for build errors
        run: npm run build
        env:
          VITE_API_MODE: mock
          VITE_API_BASE_URL: https://api.mock.local/api/v1
          VITE_API_KEY: mock-key-for-ci

  # Job 2: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for known vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 3: Unit and Integration Tests
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    needs: [security]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: proofbench-coverage
          fail_ci_if_error: false

  # Job 4: Storybook Build Verification
  storybook:
    name: Build Storybook Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Storybook
        run: npm run build-storybook
        env:
          STORYBOOK_DISABLE_TELEMETRY: 1

      - name: Upload Storybook artifacts
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: storybook-static/
          retention-days: 7

  # Job 5: Production Build
  build-production:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [quality, security, test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          VITE_API_MODE: production
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_API_KEY: ${{ secrets.VITE_API_KEY }}
          VITE_API_TIMEOUT: 30000
          VITE_API_DEBUG: false

      - name: Upload production build
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 30

  # Job 6: Deploy to Staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, security, test]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.proofbench.your-domain.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for staging
        run: npm run build
        env:
          VITE_API_MODE: production
          VITE_API_BASE_URL: ${{ secrets.STAGING_API_BASE_URL }}
          VITE_API_KEY: ${{ secrets.STAGING_API_KEY }}

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: rsync, scp, or cloud provider CLI commands

  # Job 7: Deploy to Production (on main branch, REQUIRES MANUAL APPROVAL)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-production]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://proofbench.your-domain.com
      # CRITICAL: Manual approval enforced through GitHub environment protection rules
      # Configure at: Repository Settings > Environments > production > Required reviewers
      # Add at least 1-2 trusted reviewers who must approve before deployment

    steps:
      - name: Download production build
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist/

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: AWS S3, Netlify, Vercel, or custom server deployment

      - name: Notify deployment success
        if: success()
        run: |
          echo "Production deployment successful!"
          # Add notification logic (Slack, email, etc.)
